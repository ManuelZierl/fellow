name: CI

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check if CHANGELOG.md was updated
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }} --unshallow --no-tags 
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          echo "Comparing changes against base branch: $BASE_BRANCH"

          # Check if CHANGELOG.md was modified in the PR
          git diff --name-only origin/$BASE_BRANCH...HEAD | grep -q "^CHANGELOG.md$" || {
            echo "❌ CHANGELOG.md was not modified in this pull request. Please update it before merging."
            exit 1
          }
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Run Black check
        run: black --check .
      - name: Run isort check
        run: isort --check-only --profile black .
      - name: Run mypy
        run: mypy -p fellow
      - name: Run ruff check
        run: ruff check
      - name: Run Tests
        run: |
          coverage run -m pytest
          coverage report
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
  e2e-test:
    name: E2E Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Ensure pip cache dir exists
        run: |
          python -c "import os; os.makedirs(os.path.expanduser('~/.cache/pip'), exist_ok=True)"
      - name: Cache pip dependencies
        id: pip-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Upgrade pip and build tools
        run: |
          python -m pip install --upgrade pip build
      - name: Inject version into _version.py (Ubuntu/Mac)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          VERSION=$(grep '^version =' pyproject.toml | cut -d '"' -f2)
          echo "__version__ = \"$VERSION\"" > fellow/_version.py
      - name: Inject version into _version.py (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $VERSION = (Get-Content pyproject.toml | Select-String -Pattern '^version =').ToString().Split('"')[1]
          Set-Content -Path fellow\_version.py -Value "__version__ = `"$VERSION`""
      - name: Build wheel
        run: |
          python -m build --wheel --outdir dist
      - name: Install Dependencies and built wheel (Ubuntu/Mac)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          python -m venv e2e_env
          source e2e_env/bin/activate
          pip install -r requirements-dev.txt
          pip install dist/fellow-*.whl
      - name: Install Dependencies and built wheel (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          python -m venv e2e_env
          .\e2e_env\Scripts\activate
          $whl = Get-ChildItem -Path dist\fellow-*.whl | Select-Object -First 1
          pip install -r requirements-dev.txt
          pip install $whl
      - name: Run E2E tests (Ubuntu/Mac)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          source e2e_env/bin/activate
          pytest e2e/
      - name: Run E2E tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\e2e_env\Scripts\activate
          pytest e2e/

  publish:
    needs:
      - test
      - e2e-test
    runs-on: ubuntu-latest

    # Only run on tag push
    if: |
      startsWith(github.ref, 'refs/tags/v') &&
      github.event_name == 'push' &&
      github.ref_type == 'tag'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Ensure tag points to latest commit on main
        run: |
          git fetch origin main
          TAG_COMMIT=$(git rev-parse HEAD)
          MAIN_COMMIT=$(git rev-parse origin/main)

          echo "Tag commit:  $TAG_COMMIT"
          echo "Main commit: $MAIN_COMMIT"

          if [ "$TAG_COMMIT" != "$MAIN_COMMIT" ]; then
            echo "❌ Tag does not point to the latest commit on main"
            exit 1
          fi
      - name: Check that tag version matches pyproject.toml
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          FILE_VERSION=$(grep '^version =' pyproject.toml | cut -d '"' -f2)

          echo "Tag version: $TAG_VERSION"
          echo "File version: $FILE_VERSION"

          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            echo "❌ Tag version (v$TAG_VERSION) does not match version in pyproject.toml ($FILE_VERSION)"
            exit 1
          fi
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Inject version into _version.py
        run: |
          VERSION=$(grep '^version =' pyproject.toml | cut -d '"' -f2)
          echo "__version__ = \"$VERSION\"" > fellow/_version.py
      - name: Build package
        run: python -m build
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

