import os
import shutil
import subprocess
import time
from pathlib import Path
from typing import Union

import pytest

from e2e.mock_openai_server.server import FIXTURE_PATH

REPO_ROOT = Path(__file__).parent.parent.resolve()
CURRENT_FIXTURE_DEFAULT_CONTENT = (
    "// Do not edit this file manually, it is generated by the test suite.\n"
)


@pytest.fixture(autouse=True, scope="session")
def mock_openai_server():
    os.environ["OPENAI_BASE_URL"] = "http://localhost:8000/v1"
    os.environ["OPENAI_API_KEY"] = "test_key"

    proc = subprocess.Popen(
        ["python", "e2e/mock_openai_server/server.py"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    # Wait briefly for the server to start
    time.sleep(1)

    yield  # Test session runs here

    # Teardown
    proc.terminate()
    try:
        proc.wait(timeout=5)
    except subprocess.TimeoutExpired:
        proc.kill()


def _ensure_fixture_file_exists(path: Path):
    path.parent.mkdir(parents=True, exist_ok=True)
    if not path.exists():
        path.write_text(CURRENT_FIXTURE_DEFAULT_CONTENT)


def _copy_fixture(from_path: Path, to_path: Path):
    if not from_path.exists():
        raise FileNotFoundError(f"Fixture not found: {from_path}")
    shutil.copyfile(from_path, to_path)


@pytest.fixture()
def use_fixture():
    fixture_path_absolute = (REPO_ROOT / FIXTURE_PATH).resolve()

    def _use_fixture(path: Union[str, Path]):
        if isinstance(path, str):
            path = Path(path)
        path = (REPO_ROOT / path).resolve()
        _ensure_fixture_file_exists(fixture_path_absolute)
        _copy_fixture(path, fixture_path_absolute)

    yield _use_fixture
    fixture_path_absolute.write_text(CURRENT_FIXTURE_DEFAULT_CONTENT)
